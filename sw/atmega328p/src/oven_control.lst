GAS LISTING /tmp/ccSMNIDX.s 			page 1


   1               		.file	"oven_control.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/jimbo/Desktop/iot-reflow-oven/sw/atmega328p/src/",100,0,2,.Ltext0
   8               		.stabs	"oven_control.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  18               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  19               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  20               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  21               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  23               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  24               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"short _Fract:t(0,15)=r(0,1);1;0;",128,0,0,0
  27               		.stabs	"_Fract:t(0,16)=r(0,1);2;0;",128,0,0,0
  28               		.stabs	"long _Fract:t(0,17)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"long long _Fract:t(0,18)=r(0,1);8;0;",128,0,0,0
  30               		.stabs	"unsigned short _Fract:t(0,19)=r(0,1);1;0;",128,0,0,0
  31               		.stabs	"unsigned _Fract:t(0,20)=r(0,1);2;0;",128,0,0,0
  32               		.stabs	"unsigned long _Fract:t(0,21)=r(0,1);4;0;",128,0,0,0
  33               		.stabs	"unsigned long long _Fract:t(0,22)=r(0,1);8;0;",128,0,0,0
  34               		.stabs	"_Sat short _Fract:t(0,23)=r(0,1);1;0;",128,0,0,0
  35               		.stabs	"_Sat _Fract:t(0,24)=r(0,1);2;0;",128,0,0,0
  36               		.stabs	"_Sat long _Fract:t(0,25)=r(0,1);4;0;",128,0,0,0
  37               		.stabs	"_Sat long long _Fract:t(0,26)=r(0,1);8;0;",128,0,0,0
  38               		.stabs	"_Sat unsigned short _Fract:t(0,27)=r(0,1);1;0;",128,0,0,0
  39               		.stabs	"_Sat unsigned _Fract:t(0,28)=r(0,1);2;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned long _Fract:t(0,29)=r(0,1);4;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned long long _Fract:t(0,30)=r(0,1);8;0;",128,0,0,0
  42               		.stabs	"short _Accum:t(0,31)=r(0,1);2;0;",128,0,0,0
  43               		.stabs	"_Accum:t(0,32)=r(0,1);4;0;",128,0,0,0
  44               		.stabs	"long _Accum:t(0,33)=r(0,1);8;0;",128,0,0,0
  45               		.stabs	"long long _Accum:t(0,34)=r(0,1);8;0;",128,0,0,0
  46               		.stabs	"unsigned short _Accum:t(0,35)=r(0,1);2;0;",128,0,0,0
  47               		.stabs	"unsigned _Accum:t(0,36)=r(0,1);4;0;",128,0,0,0
  48               		.stabs	"unsigned long _Accum:t(0,37)=r(0,1);8;0;",128,0,0,0
  49               		.stabs	"unsigned long long _Accum:t(0,38)=r(0,1);8;0;",128,0,0,0
  50               		.stabs	"_Sat short _Accum:t(0,39)=r(0,1);2;0;",128,0,0,0
  51               		.stabs	"_Sat _Accum:t(0,40)=r(0,1);4;0;",128,0,0,0
  52               		.stabs	"_Sat long _Accum:t(0,41)=r(0,1);8;0;",128,0,0,0
  53               		.stabs	"_Sat long long _Accum:t(0,42)=r(0,1);8;0;",128,0,0,0
  54               		.stabs	"_Sat unsigned short _Accum:t(0,43)=r(0,1);2;0;",128,0,0,0
  55               		.stabs	"_Sat unsigned _Accum:t(0,44)=r(0,1);4;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned long _Accum:t(0,45)=r(0,1);8;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned long long _Accum:t(0,46)=r(0,1);8;0;",128,0,0,0
GAS LISTING /tmp/ccSMNIDX.s 			page 2


  58               		.stabs	"void:t(0,47)=(0,47)",128,0,0,0
  59               		.stabs	"/usr/lib/gcc/avr/4.8.1/include/stdint.h",130,0,0,0
  60               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  61               		.stabs	"int8_t:t(2,1)=(0,10)",128,0,121,0
  62               		.stabs	"uint8_t:t(2,2)=(0,11)",128,0,122,0
  63               		.stabs	"int16_t:t(2,3)=(0,1)",128,0,123,0
  64               		.stabs	"uint16_t:t(2,4)=(0,4)",128,0,124,0
  65               		.stabs	"int32_t:t(2,5)=(0,3)",128,0,125,0
  66               		.stabs	"uint32_t:t(2,6)=(0,5)",128,0,126,0
  67               		.stabs	"int64_t:t(2,7)=(0,6)",128,0,128,0
  68               		.stabs	"uint64_t:t(2,8)=(0,7)",128,0,129,0
  69               		.stabs	"intptr_t:t(2,9)=(2,3)",128,0,142,0
  70               		.stabs	"uintptr_t:t(2,10)=(2,4)",128,0,147,0
  71               		.stabs	"int_least8_t:t(2,11)=(2,1)",128,0,159,0
  72               		.stabs	"uint_least8_t:t(2,12)=(2,2)",128,0,164,0
  73               		.stabs	"int_least16_t:t(2,13)=(2,3)",128,0,169,0
  74               		.stabs	"uint_least16_t:t(2,14)=(2,4)",128,0,174,0
  75               		.stabs	"int_least32_t:t(2,15)=(2,5)",128,0,179,0
  76               		.stabs	"uint_least32_t:t(2,16)=(2,6)",128,0,184,0
  77               		.stabs	"int_least64_t:t(2,17)=(2,7)",128,0,192,0
  78               		.stabs	"uint_least64_t:t(2,18)=(2,8)",128,0,199,0
  79               		.stabs	"int_fast8_t:t(2,19)=(2,1)",128,0,213,0
  80               		.stabs	"uint_fast8_t:t(2,20)=(2,2)",128,0,218,0
  81               		.stabs	"int_fast16_t:t(2,21)=(2,3)",128,0,223,0
  82               		.stabs	"uint_fast16_t:t(2,22)=(2,4)",128,0,228,0
  83               		.stabs	"int_fast32_t:t(2,23)=(2,5)",128,0,233,0
  84               		.stabs	"uint_fast32_t:t(2,24)=(2,6)",128,0,238,0
  85               		.stabs	"int_fast64_t:t(2,25)=(2,7)",128,0,246,0
  86               		.stabs	"uint_fast64_t:t(2,26)=(2,8)",128,0,253,0
  87               		.stabs	"intmax_t:t(2,27)=(2,7)",128,0,273,0
  88               		.stabs	"uintmax_t:t(2,28)=(2,8)",128,0,278,0
  89               		.stabn	162,0,0,0
  90               		.stabn	162,0,0,0
  91               		.stabs	"/usr/lib/avr/include/avr/interrupt.h",130,0,0,0
  92               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  93               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  94               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  95               		.stabs	"int_farptr_t:t(6,1)=(2,5)",128,0,77,0
  96               		.stabs	"uint_farptr_t:t(6,2)=(2,6)",128,0,81,0
  97               		.stabn	162,0,0,0
  98               		.stabn	162,0,0,0
  99               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
 100               		.stabs	"__fuse_t:t(7,1)=(7,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
 101               		.stabn	162,0,0,0
 102               		.stabn	162,0,0,0
 103               		.stabn	162,0,0,0
 104               		.stabs	"/usr/lib/avr/include/avr/pgmspace.h",130,0,0,0
 105               		.stabs	"/usr/lib/gcc/avr/4.8.1/include/stddef.h",130,0,0,0
 106               		.stabs	"size_t:t(9,1)=(0,4)",128,0,212,0
 107               		.stabn	162,0,0,0
 108               		.stabn	162,0,0,0
 109               	.global	_percent
 110               		.section .bss
 111               		.type	_percent, @object
 112               		.size	_percent, 1
 113               	_percent:
 114 0000 00        		.zero	1
GAS LISTING /tmp/ccSMNIDX.s 			page 3


 115               	.global	_counter_t2
 116               		.type	_counter_t2, @object
 117               		.size	_counter_t2, 1
 118               	_counter_t2:
 119 0001 00        		.zero	1
 120               		.section	.progmem.data,"a",@progbits
 121               		.type	powerLUT, @object
 122               		.size	powerLUT, 99
 123               	powerLUT:
 124 0000 06        		.byte	6
 125 0001 09        		.byte	9
 126 0002 0B        		.byte	11
 127 0003 0D        		.byte	13
 128 0004 0E        		.byte	14
 129 0005 10        		.byte	16
 130 0006 11        		.byte	17
 131 0007 12        		.byte	18
 132 0008 13        		.byte	19
 133 0009 15        		.byte	21
 134 000a 16        		.byte	22
 135 000b 17        		.byte	23
 136 000c 17        		.byte	23
 137 000d 18        		.byte	24
 138 000e 1A        		.byte	26
 139 000f 1A        		.byte	26
 140 0010 1B        		.byte	27
 141 0011 1C        		.byte	28
 142 0012 1D        		.byte	29
 143 0013 1D        		.byte	29
 144 0014 1F        		.byte	31
 145 0015 1F        		.byte	31
 146 0016 20        		.byte	32
 147 0017 21        		.byte	33
 148 0018 21        		.byte	33
 149 0019 22        		.byte	34
 150 001a 23        		.byte	35
 151 001b 24        		.byte	36
 152 001c 24        		.byte	36
 153 001d 25        		.byte	37
 154 001e 26        		.byte	38
 155 001f 26        		.byte	38
 156 0020 27        		.byte	39
 157 0021 27        		.byte	39
 158 0022 29        		.byte	41
 159 0023 29        		.byte	41
 160 0024 2A        		.byte	42
 161 0025 2A        		.byte	42
 162 0026 2B        		.byte	43
 163 0027 2B        		.byte	43
 164 0028 2C        		.byte	44
 165 0029 2D        		.byte	45
 166 002a 2E        		.byte	46
 167 002b 2E        		.byte	46
 168 002c 2F        		.byte	47
 169 002d 2F        		.byte	47
 170 002e 30        		.byte	48
 171 002f 31        		.byte	49
GAS LISTING /tmp/ccSMNIDX.s 			page 4


 172 0030 31        		.byte	49
 173 0031 32        		.byte	50
 174 0032 33        		.byte	51
 175 0033 33        		.byte	51
 176 0034 34        		.byte	52
 177 0035 35        		.byte	53
 178 0036 35        		.byte	53
 179 0037 36        		.byte	54
 180 0038 36        		.byte	54
 181 0039 37        		.byte	55
 182 003a 38        		.byte	56
 183 003b 39        		.byte	57
 184 003c 39        		.byte	57
 185 003d 3A        		.byte	58
 186 003e 3A        		.byte	58
 187 003f 3B        		.byte	59
 188 0040 3B        		.byte	59
 189 0041 3D        		.byte	61
 190 0042 3D        		.byte	61
 191 0043 3E        		.byte	62
 192 0044 3E        		.byte	62
 193 0045 3F        		.byte	63
 194 0046 40        		.byte	64
 195 0047 40        		.byte	64
 196 0048 41        		.byte	65
 197 0049 42        		.byte	66
 198 004a 43        		.byte	67
 199 004b 43        		.byte	67
 200 004c 44        		.byte	68
 201 004d 45        		.byte	69
 202 004e 45        		.byte	69
 203 004f 47        		.byte	71
 204 0050 47        		.byte	71
 205 0051 48        		.byte	72
 206 0052 49        		.byte	73
 207 0053 4A        		.byte	74
 208 0054 4A        		.byte	74
 209 0055 4C        		.byte	76
 210 0056 4D        		.byte	77
 211 0057 4D        		.byte	77
 212 0058 4E        		.byte	78
 213 0059 4F        		.byte	79
 214 005a 51        		.byte	81
 215 005b 52        		.byte	82
 216 005c 53        		.byte	83
 217 005d 54        		.byte	84
 218 005e 56        		.byte	86
 219 005f 57        		.byte	87
 220 0060 59        		.byte	89
 221 0061 5B        		.byte	91
 222 0062 5E        		.byte	94
 223               		.text
 224               		.stabs	"__vector_1:F(0,47)",36,0,33,__vector_1
 225               	.global	__vector_1
 226               		.type	__vector_1, @function
 227               	__vector_1:
 228               		.stabd	46,0,0
GAS LISTING /tmp/ccSMNIDX.s 			page 5


   1:oven_control.c **** #include <stdint.h>
   2:oven_control.c **** #include <avr/interrupt.h>
   3:oven_control.c **** #include <avr/pgmspace.h>
   4:oven_control.c **** #include "oven_control.h"
   5:oven_control.c **** #include "macros.h"
   6:oven_control.c **** 
   7:oven_control.c **** /*** Oven Control Variables ***/
   8:oven_control.c **** volatile uint8_t    _percent = 0;
   9:oven_control.c **** volatile uint8_t    _counter_t2 = 0;
  10:oven_control.c **** 
  11:oven_control.c **** /*** Oven Power Remap LUT ***/
  12:oven_control.c **** /* Lookup table to more accurately represent power output percentage.
  13:oven_control.c ****  * Compensates for curvature of sinusoid at peaks and troughs. Values are
  14:oven_control.c ****  * stored in FLASH because why waste the space anywhere else? Check out this
  15:oven_control.c ****  * doc for more info on PROGMEM attribute:
  16:oven_control.c ****  *
  17:oven_control.c ****  * http://www.github.com/abcminiuser/avr-tutorials/blob/master/Progmem/Output/Progmem.pdf?raw=true 
  18:oven_control.c **** static const PROGMEM uint8_t powerLUT[99] = 
  19:oven_control.c **** {
  20:oven_control.c ****     6, 9, 11,13,14,16,17,18,19,21,
  21:oven_control.c ****     22,23,23,24,26,26,27,28,29,29,
  22:oven_control.c ****     31,31,32,33,33,34,35,36,36,37,
  23:oven_control.c ****     38,38,39,39,41,41,42,42,43,43,
  24:oven_control.c ****     44,45,46,46,47,47,48,49,49,50,
  25:oven_control.c ****     51,51,52,53,53,54,54,55,56,57,
  26:oven_control.c ****     57,58,58,59,59,61,61,62,62,63,
  27:oven_control.c ****     64,64,65,66,67,67,68,69,69,71,
  28:oven_control.c ****     71,72,73,74,74,76,77,77,78,79,
  29:oven_control.c ****     81,82,83,84,86,87,89,91,94  
  30:oven_control.c **** };
  31:oven_control.c **** 
  32:oven_control.c **** /*** Zero-Crossing External ISR ***/
  33:oven_control.c **** ISR(INT0_vect)
  34:oven_control.c **** {
 229               		.stabn	68,0,34,.LM0-.LFBB1
 230               	.LM0:
 231               	.LFBB1:
 232 0000 1F92      		push r1
 233 0002 0F92      		push r0
 234 0004 0090 5F00 		lds r0,95
 235 0008 0F92      		push r0
 236 000a 1124      		clr __zero_reg__
 237 000c 2F93      		push r18
 238 000e 3F93      		push r19
 239 0010 8F93      		push r24
 240 0012 9F93      		push r25
 241 0014 EF93      		push r30
 242 0016 FF93      		push r31
 243 0018 CF93      		push r28
 244 001a DF93      		push r29
 245 001c CDB7      		in r28,__SP_L__
 246 001e DEB7      		in r29,__SP_H__
 247               	/* prologue: Signal */
 248               	/* frame size = 0 */
 249               	/* stack size = 11 */
 250               	.L__stack_usage = 11
  35:oven_control.c ****     /* 0 is an off switch. round up or down a percentage that strays into the
GAS LISTING /tmp/ccSMNIDX.s 			page 6


  36:oven_control.c ****      * end-zone where we have a margin wide enough to cater for the minimum
  37:oven_control.c ****      * pulse width and the delay in the zero crossing firing */
  38:oven_control.c ****     if(_percent == 0)
 251               		.stabn	68,0,38,.LM1-.LFBB1
 252               	.LM1:
 253 0020 8091 0000 		lds r24,_percent
 254 0024 8823      		tst r24
 255 0026 01F4      		brne .L2
  39:oven_control.c ****     {
  40:oven_control.c ****         OVEN_OFF();
 256               		.stabn	68,0,40,.LM2-.LFBB1
 257               	.LM2:
 258 0028 8BE2      		ldi r24,lo8(43)
 259 002a 90E0      		ldi r25,0
 260 002c 2BE2      		ldi r18,lo8(43)
 261 002e 30E0      		ldi r19,0
 262 0030 F901      		movw r30,r18
 263 0032 2081      		ld r18,Z
 264 0034 277F      		andi r18,lo8(-9)
 265 0036 FC01      		movw r30,r24
 266 0038 2083      		st Z,r18
  41:oven_control.c ****         return;
 267               		.stabn	68,0,41,.LM3-.LFBB1
 268               	.LM3:
 269 003a 00C0      		rjmp .L1
 270               	.L2:
  42:oven_control.c ****     }
  43:oven_control.c ****     // either user asked for 100 or calc rounds up to 100
  44:oven_control.c ****     else if(_percent == 100 || _counter_t2 == 0)
 271               		.stabn	68,0,44,.LM4-.LFBB1
 272               	.LM4:
 273 003c 8091 0000 		lds r24,_percent
 274 0040 8436      		cpi r24,lo8(100)
 275 0042 01F0      		breq .L4
 276               		.stabn	68,0,44,.LM5-.LFBB1
 277               	.LM5:
 278 0044 8091 0000 		lds r24,_counter_t2
 279 0048 8823      		tst r24
 280 004a 01F4      		brne .L5
 281               	.L4:
  45:oven_control.c ****     {
  46:oven_control.c ****         OVEN_ON(); 
 282               		.stabn	68,0,46,.LM6-.LFBB1
 283               	.LM6:
 284 004c 8BE2      		ldi r24,lo8(43)
 285 004e 90E0      		ldi r25,0
 286 0050 2BE2      		ldi r18,lo8(43)
 287 0052 30E0      		ldi r19,0
 288 0054 F901      		movw r30,r18
 289 0056 2081      		ld r18,Z
 290 0058 2860      		ori r18,lo8(8)
 291 005a FC01      		movw r30,r24
 292 005c 2083      		st Z,r18
 293 005e 00C0      		rjmp .L6
 294               	.L5:
  47:oven_control.c ****     }
  48:oven_control.c ****     // Comparison to a constant is pretty fast
GAS LISTING /tmp/ccSMNIDX.s 			page 7


  49:oven_control.c ****     else if(_counter_t2 > TICKS_PER_HALF_CYCLE - TRIAC_PULSE_TICKS - MARGIN_TICKS)
 295               		.stabn	68,0,49,.LM7-.LFBB1
 296               	.LM7:
 297 0060 8091 0000 		lds r24,_counter_t2
 298 0064 8633      		cpi r24,lo8(54)
 299 0066 00F0      		brlo .L6
  50:oven_control.c ****     {
  51:oven_control.c ****         // Also a constant comparison so also pretty fast
  52:oven_control.c ****         if(_counter_t2 > (TICKS_PER_HALF_CYCLE - (TRIAC_PULSE_TICKS - MARGIN_TICKS / 2)))
 300               		.stabn	68,0,52,.LM8-.LFBB1
 301               	.LM8:
 302 0068 8091 0000 		lds r24,_counter_t2
 303 006c 8234      		cpi r24,lo8(66)
 304 006e 00F0      		brlo .L7
  53:oven_control.c ****         {
  54:oven_control.c ****             // round half up to completely off
  55:oven_control.c ****             OVEN_OFF();
 305               		.stabn	68,0,55,.LM9-.LFBB1
 306               	.LM9:
 307 0070 8BE2      		ldi r24,lo8(43)
 308 0072 90E0      		ldi r25,0
 309 0074 2BE2      		ldi r18,lo8(43)
 310 0076 30E0      		ldi r19,0
 311 0078 F901      		movw r30,r18
 312 007a 2081      		ld r18,Z
 313 007c 277F      		andi r18,lo8(-9)
 314 007e FC01      		movw r30,r24
 315 0080 2083      		st Z,r18
  56:oven_control.c ****             return;
 316               		.stabn	68,0,56,.LM10-.LFBB1
 317               	.LM10:
 318 0082 00C0      		rjmp .L1
 319               	.L7:
  57:oven_control.c ****         }
  58:oven_control.c ****         else 
  59:oven_control.c ****             _counter_t2 = TICKS_PER_HALF_CYCLE - TRIAC_PULSE_TICKS - MARGIN_TICKS;
 320               		.stabn	68,0,59,.LM11-.LFBB1
 321               	.LM11:
 322 0084 85E3      		ldi r24,lo8(53)
 323 0086 8093 0000 		sts _counter_t2,r24
 324               	.L6:
  60:oven_control.c ****     }
  61:oven_control.c **** 
  62:oven_control.c ****     // Counter is acceptable, or has been rounded down to be acceptable
  63:oven_control.c ****     OCR2A = _counter_t2;
 325               		.stabn	68,0,63,.LM12-.LFBB1
 326               	.LM12:
 327 008a 83EB      		ldi r24,lo8(-77)
 328 008c 90E0      		ldi r25,0
 329 008e 2091 0000 		lds r18,_counter_t2
 330 0092 FC01      		movw r30,r24
 331 0094 2083      		st Z,r18
  64:oven_control.c ****     TCNT2 = 0;
 332               		.stabn	68,0,64,.LM13-.LFBB1
 333               	.LM13:
 334 0096 82EB      		ldi r24,lo8(-78)
 335 0098 90E0      		ldi r25,0
GAS LISTING /tmp/ccSMNIDX.s 			page 8


 336 009a FC01      		movw r30,r24
 337 009c 1082      		st Z,__zero_reg__
  65:oven_control.c ****     TCCR2B = (1 << CS20) | (1 << CS21) | (1 << CS22);    // start timer: 8MHz/1024 = 128uS/tick
 338               		.stabn	68,0,65,.LM14-.LFBB1
 339               	.LM14:
 340 009e 81EB      		ldi r24,lo8(-79)
 341 00a0 90E0      		ldi r25,0
 342 00a2 27E0      		ldi r18,lo8(7)
 343 00a4 FC01      		movw r30,r24
 344 00a6 2083      		st Z,r18
 345               	.L1:
 346               	/* epilogue start */
  66:oven_control.c **** }
 347               		.stabn	68,0,66,.LM15-.LFBB1
 348               	.LM15:
 349 00a8 DF91      		pop r29
 350 00aa CF91      		pop r28
 351 00ac FF91      		pop r31
 352 00ae EF91      		pop r30
 353 00b0 9F91      		pop r25
 354 00b2 8F91      		pop r24
 355 00b4 3F91      		pop r19
 356 00b6 2F91      		pop r18
 357 00b8 0F90      		pop r0
 358 00ba 0092 5F00 		sts 95,r0
 359 00be 0F90      		pop r0
 360 00c0 1F90      		pop r1
 361 00c2 1895      		reti
 362               		.size	__vector_1, .-__vector_1
 363               	.Lscope1:
 364               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 365               		.stabd	78,0,0
 366               		.stabs	"__vector_7:F(0,47)",36,0,69,__vector_7
 367               	.global	__vector_7
 368               		.type	__vector_7, @function
 369               	__vector_7:
 370               		.stabd	46,0,0
  67:oven_control.c **** 
  68:oven_control.c **** /*** Timer2 Comparison Value A ISR ***/
  69:oven_control.c **** ISR(TIMER2_COMPA_vect)
  70:oven_control.c **** {
 371               		.stabn	68,0,70,.LM16-.LFBB2
 372               	.LM16:
 373               	.LFBB2:
 374 00c4 1F92      		push r1
 375 00c6 0F92      		push r0
 376 00c8 0090 5F00 		lds r0,95
 377 00cc 0F92      		push r0
 378 00ce 1124      		clr __zero_reg__
 379 00d0 2F93      		push r18
 380 00d2 3F93      		push r19
 381 00d4 8F93      		push r24
 382 00d6 9F93      		push r25
 383 00d8 EF93      		push r30
 384 00da FF93      		push r31
 385 00dc CF93      		push r28
 386 00de DF93      		push r29
GAS LISTING /tmp/ccSMNIDX.s 			page 9


 387 00e0 CDB7      		in r28,__SP_L__
 388 00e2 DEB7      		in r29,__SP_H__
 389               	/* prologue: Signal */
 390               	/* frame size = 0 */
 391               	/* stack size = 11 */
 392               	.L__stack_usage = 11
  71:oven_control.c ****     // Turn on oven, hold it active for a min latching time before switching it off
  72:oven_control.c ****     OVEN_ON();
 393               		.stabn	68,0,72,.LM17-.LFBB2
 394               	.LM17:
 395 00e4 8BE2      		ldi r24,lo8(43)
 396 00e6 90E0      		ldi r25,0
 397 00e8 2BE2      		ldi r18,lo8(43)
 398 00ea 30E0      		ldi r19,0
 399 00ec F901      		movw r30,r18
 400 00ee 2081      		ld r18,Z
 401 00f0 2860      		ori r18,lo8(8)
 402 00f2 FC01      		movw r30,r24
 403 00f4 2083      		st Z,r18
  73:oven_control.c **** 
  74:oven_control.c ****     // The overflow interrupt will fire when the minimum pulse width is reached
  75:oven_control.c ****     TCNT2 = 256 - TRIAC_PULSE_TICKS;
 404               		.stabn	68,0,75,.LM18-.LFBB2
 405               	.LM18:
 406 00f6 82EB      		ldi r24,lo8(-78)
 407 00f8 90E0      		ldi r25,0
 408 00fa 2CEF      		ldi r18,lo8(-4)
 409 00fc FC01      		movw r30,r24
 410 00fe 2083      		st Z,r18
 411               	/* epilogue start */
  76:oven_control.c **** }
 412               		.stabn	68,0,76,.LM19-.LFBB2
 413               	.LM19:
 414 0100 DF91      		pop r29
 415 0102 CF91      		pop r28
 416 0104 FF91      		pop r31
 417 0106 EF91      		pop r30
 418 0108 9F91      		pop r25
 419 010a 8F91      		pop r24
 420 010c 3F91      		pop r19
 421 010e 2F91      		pop r18
 422 0110 0F90      		pop r0
 423 0112 0092 5F00 		sts 95,r0
 424 0116 0F90      		pop r0
 425 0118 1F90      		pop r1
 426 011a 1895      		reti
 427               		.size	__vector_7, .-__vector_7
 428               	.Lscope2:
 429               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 430               		.stabd	78,0,0
 431               		.stabs	"__vector_9:F(0,47)",36,0,79,__vector_9
 432               	.global	__vector_9
 433               		.type	__vector_9, @function
 434               	__vector_9:
 435               		.stabd	46,0,0
  77:oven_control.c **** 
  78:oven_control.c **** /*** Timer2 Overflow ISR ***/
GAS LISTING /tmp/ccSMNIDX.s 			page 10


  79:oven_control.c **** ISR(TIMER2_OVF_vect)
  80:oven_control.c **** {
 436               		.stabn	68,0,80,.LM20-.LFBB3
 437               	.LM20:
 438               	.LFBB3:
 439 011c 1F92      		push r1
 440 011e 0F92      		push r0
 441 0120 0090 5F00 		lds r0,95
 442 0124 0F92      		push r0
 443 0126 1124      		clr __zero_reg__
 444 0128 2F93      		push r18
 445 012a 3F93      		push r19
 446 012c 8F93      		push r24
 447 012e 9F93      		push r25
 448 0130 EF93      		push r30
 449 0132 FF93      		push r31
 450 0134 CF93      		push r28
 451 0136 DF93      		push r29
 452 0138 CDB7      		in r28,__SP_L__
 453 013a DEB7      		in r29,__SP_H__
 454               	/* prologue: Signal */
 455               	/* frame size = 0 */
 456               	/* stack size = 11 */
 457               	.L__stack_usage = 11
  81:oven_control.c ****     // Turn off oven
  82:oven_control.c ****     OVEN_OFF();
 458               		.stabn	68,0,82,.LM21-.LFBB3
 459               	.LM21:
 460 013c 8BE2      		ldi r24,lo8(43)
 461 013e 90E0      		ldi r25,0
 462 0140 2BE2      		ldi r18,lo8(43)
 463 0142 30E0      		ldi r19,0
 464 0144 F901      		movw r30,r18
 465 0146 2081      		ld r18,Z
 466 0148 277F      		andi r18,lo8(-9)
 467 014a FC01      		movw r30,r24
 468 014c 2083      		st Z,r18
  83:oven_control.c **** 
  84:oven_control.c ****     // turn off the timer. the zero-crossing handler will restart it
  85:oven_control.c ****     TCCR2B = 0;
 469               		.stabn	68,0,85,.LM22-.LFBB3
 470               	.LM22:
 471 014e 81EB      		ldi r24,lo8(-79)
 472 0150 90E0      		ldi r25,0
 473 0152 FC01      		movw r30,r24
 474 0154 1082      		st Z,__zero_reg__
 475               	/* epilogue start */
  86:oven_control.c **** }
 476               		.stabn	68,0,86,.LM23-.LFBB3
 477               	.LM23:
 478 0156 DF91      		pop r29
 479 0158 CF91      		pop r28
 480 015a FF91      		pop r31
 481 015c EF91      		pop r30
 482 015e 9F91      		pop r25
 483 0160 8F91      		pop r24
 484 0162 3F91      		pop r19
GAS LISTING /tmp/ccSMNIDX.s 			page 11


 485 0164 2F91      		pop r18
 486 0166 0F90      		pop r0
 487 0168 0092 5F00 		sts 95,r0
 488 016c 0F90      		pop r0
 489 016e 1F90      		pop r1
 490 0170 1895      		reti
 491               		.size	__vector_9, .-__vector_9
 492               	.Lscope3:
 493               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 494               		.stabd	78,0,0
 495               		.stabs	"oven_setDutyCycle:F(0,47)",36,0,89,oven_setDutyCycle
 496               		.stabs	"percent:p(2,2)",160,0,89,6
 497               	.global	oven_setDutyCycle
 498               		.type	oven_setDutyCycle, @function
 499               	oven_setDutyCycle:
 500               		.stabd	46,0,0
  87:oven_control.c **** 
  88:oven_control.c **** /*** Oven Duty Cycle Function ***/
  89:oven_control.c **** void oven_setDutyCycle(uint8_t percent)
  90:oven_control.c **** {
 501               		.stabn	68,0,90,.LM24-.LFBB4
 502               	.LM24:
 503               	.LFBB4:
 504 0172 CF93      		push r28
 505 0174 DF93      		push r29
 506 0176 CDB7      		in r28,__SP_L__
 507 0178 DEB7      		in r29,__SP_H__
 508 017a 2897      		sbiw r28,8
 509 017c 0FB6      		in __tmp_reg__,__SREG__
 510 017e F894      		cli
 511 0180 DEBF      		out __SP_H__,r29
 512 0182 0FBE      		out __SREG__,__tmp_reg__
 513 0184 CDBF      		out __SP_L__,r28
 514               	/* prologue: function */
 515               	/* frame size = 8 */
 516               	/* stack size = 10 */
 517               	.L__stack_usage = 10
 518 0186 8E83      		std Y+6,r24
  91:oven_control.c **** 
  92:oven_control.c ****     uint16_t newCounter;
  93:oven_control.c ****     
  94:oven_control.c ****     // percentages between 1 and 99 inclusive use the lookup table to translate a linear
  95:oven_control.c ****     // demand for power to a position on the phase angle axis
  96:oven_control.c ****     if(percent > 0 && percent < 100)
 519               		.stabn	68,0,96,.LM25-.LFBB4
 520               	.LM25:
 521 0188 8E81      		ldd r24,Y+6
 522 018a 8823      		tst r24
 523 018c 01F0      		breq .L11
 524               		.stabn	68,0,96,.LM26-.LFBB4
 525               	.LM26:
 526 018e 8E81      		ldd r24,Y+6
 527 0190 8436      		cpi r24,lo8(100)
 528 0192 00F4      		brsh .L11
 529               	.LBB2:
  97:oven_control.c ****         _percent = pgm_read_byte(&powerLUT[percent - 1]);
 530               		.stabn	68,0,97,.LM27-.LFBB4
GAS LISTING /tmp/ccSMNIDX.s 			page 12


 531               	.LM27:
 532 0194 8E81      		ldd r24,Y+6
 533 0196 882F      		mov r24,r24
 534 0198 90E0      		ldi r25,0
 535 019a 0197      		sbiw r24,1
 536 019c 8050      		subi r24,lo8(-(powerLUT))
 537 019e 9040      		sbci r25,hi8(-(powerLUT))
 538 01a0 9A83      		std Y+2,r25
 539 01a2 8983      		std Y+1,r24
 540 01a4 8981      		ldd r24,Y+1
 541 01a6 9A81      		ldd r25,Y+2
 542 01a8 FC01      		movw r30,r24
 543               	/* #APP */
 544               	 ;  97 "oven_control.c" 1
 545 01aa 8491      		lpm r24, Z
 546               		
 547               	 ;  0 "" 2
 548               	/* #NOAPP */
 549 01ac 8B83      		std Y+3,r24
 550 01ae 8B81      		ldd r24,Y+3
 551               	.LBE2:
 552 01b0 8093 0000 		sts _percent,r24
 553               	.L11:
  98:oven_control.c **** 
  99:oven_control.c ****     // calculate the new counter value
 100:oven_control.c ****     newCounter = ((TICKS_PER_HALF_CYCLE - MARGIN_TICKS - TRIAC_PULSE_TICKS) * (100 - percent)) / 10
 554               		.stabn	68,0,100,.LM28-.LFBB4
 555               	.LM28:
 556 01b4 8E81      		ldd r24,Y+6
 557 01b6 882F      		mov r24,r24
 558 01b8 90E0      		ldi r25,0
 559 01ba 24E6      		ldi r18,lo8(100)
 560 01bc 30E0      		ldi r19,0
 561 01be 281B      		sub r18,r24
 562 01c0 390B      		sbc r19,r25
 563 01c2 45E3      		ldi r20,lo8(53)
 564 01c4 429F      		mul r20,r18
 565 01c6 C001      		movw r24,r0
 566 01c8 439F      		mul r20,r19
 567 01ca 900D      		add r25,r0
 568 01cc 1124      		clr __zero_reg__
 569 01ce 24E6      		ldi r18,lo8(100)
 570 01d0 30E0      		ldi r19,0
 571 01d2 B901      		movw r22,r18
 572 01d4 0E94 0000 		call __divmodhi4
 573 01d8 CB01      		movw r24,r22
 574 01da 9D83      		std Y+5,r25
 575 01dc 8C83      		std Y+4,r24
 101:oven_control.c **** 
 102:oven_control.c ****     // set the new state with interrupts off because 16-bit writes are not atomic
 103:oven_control.c ****     cli();
 576               		.stabn	68,0,103,.LM29-.LFBB4
 577               	.LM29:
 578               	/* #APP */
 579               	 ;  103 "oven_control.c" 1
 580 01de F894      		cli
 581               	 ;  0 "" 2
GAS LISTING /tmp/ccSMNIDX.s 			page 13


 104:oven_control.c ****     _counter_t2 = newCounter;
 582               		.stabn	68,0,104,.LM30-.LFBB4
 583               	.LM30:
 584               	/* #NOAPP */
 585 01e0 8C81      		ldd r24,Y+4
 586 01e2 8093 0000 		sts _counter_t2,r24
 105:oven_control.c ****     _percent = percent;
 587               		.stabn	68,0,105,.LM31-.LFBB4
 588               	.LM31:
 589 01e6 8E81      		ldd r24,Y+6
 590 01e8 8093 0000 		sts _percent,r24
 106:oven_control.c ****     sei();
 591               		.stabn	68,0,106,.LM32-.LFBB4
 592               	.LM32:
 593               	/* #APP */
 594               	 ;  106 "oven_control.c" 1
 595 01ec 7894      		sei
 596               	 ;  0 "" 2
 597               	/* epilogue start */
 107:oven_control.c **** }
 598               		.stabn	68,0,107,.LM33-.LFBB4
 599               	.LM33:
 600               	/* #NOAPP */
 601 01ee 2896      		adiw r28,8
 602 01f0 0FB6      		in __tmp_reg__,__SREG__
 603 01f2 F894      		cli
 604 01f4 DEBF      		out __SP_H__,r29
 605 01f6 0FBE      		out __SREG__,__tmp_reg__
 606 01f8 CDBF      		out __SP_L__,r28
 607 01fa DF91      		pop r29
 608 01fc CF91      		pop r28
 609 01fe 0895      		ret
 610               		.size	oven_setDutyCycle, .-oven_setDutyCycle
 611               		.stabs	"newCounter:(2,4)",128,0,92,4
 612               		.stabn	192,0,0,.LFBB4-.LFBB4
 613               		.stabs	"__addr16:(2,4)",128,0,97,1
 614               		.stabs	"__result:(2,2)",128,0,97,3
 615               		.stabn	192,0,0,.LBB2-.LFBB4
 616               		.stabn	224,0,0,.LBE2-.LFBB4
 617               		.stabn	224,0,0,.Lscope4-.LFBB4
 618               	.Lscope4:
 619               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 620               		.stabd	78,0,0
 621               		.stabs	"oven_start:F(0,47)",36,0,110,oven_start
 622               	.global	oven_start
 623               		.type	oven_start, @function
 624               	oven_start:
 625               		.stabd	46,0,0
 108:oven_control.c **** 
 109:oven_control.c **** /*** Configure Oven GPIO and Begin Timer2 ***/
 110:oven_control.c **** void oven_start(void)
 111:oven_control.c **** {
 626               		.stabn	68,0,111,.LM34-.LFBB5
 627               	.LM34:
 628               	.LFBB5:
 629 0200 CF93      		push r28
 630 0202 DF93      		push r29
GAS LISTING /tmp/ccSMNIDX.s 			page 14


 631 0204 CDB7      		in r28,__SP_L__
 632 0206 DEB7      		in r29,__SP_H__
 633               	/* prologue: function */
 634               	/* frame size = 0 */
 635               	/* stack size = 2 */
 636               	.L__stack_usage = 2
 112:oven_control.c ****     // Setup inputs and outputs
 113:oven_control.c ****     CONFIG_AS_OUTPUT(TRIAC_EN);
 637               		.stabn	68,0,113,.LM35-.LFBB5
 638               	.LM35:
 639 0208 8AE2      		ldi r24,lo8(42)
 640 020a 90E0      		ldi r25,0
 641 020c 2AE2      		ldi r18,lo8(42)
 642 020e 30E0      		ldi r19,0
 643 0210 F901      		movw r30,r18
 644 0212 2081      		ld r18,Z
 645 0214 2860      		ori r18,lo8(8)
 646 0216 FC01      		movw r30,r24
 647 0218 2083      		st Z,r18
 114:oven_control.c ****     CONFIG_AS_INPUT(ZERO_CROSS);
 648               		.stabn	68,0,114,.LM36-.LFBB5
 649               	.LM36:
 650 021a 8AE2      		ldi r24,lo8(42)
 651 021c 90E0      		ldi r25,0
 652 021e 2AE2      		ldi r18,lo8(42)
 653 0220 30E0      		ldi r19,0
 654 0222 F901      		movw r30,r18
 655 0224 2081      		ld r18,Z
 656 0226 2B7F      		andi r18,lo8(-5)
 657 0228 FC01      		movw r30,r24
 658 022a 2083      		st Z,r18
 115:oven_control.c **** 
 116:oven_control.c ****     // Initial values for outputs
 117:oven_control.c ****     SET_LOW(TRIAC_EN);
 659               		.stabn	68,0,117,.LM37-.LFBB5
 660               	.LM37:
 661 022c 8BE2      		ldi r24,lo8(43)
 662 022e 90E0      		ldi r25,0
 663 0230 2BE2      		ldi r18,lo8(43)
 664 0232 30E0      		ldi r19,0
 665 0234 F901      		movw r30,r18
 666 0236 2081      		ld r18,Z
 667 0238 277F      		andi r18,lo8(-9)
 668 023a FC01      		movw r30,r24
 669 023c 2083      		st Z,r18
 118:oven_control.c **** 
 119:oven_control.c ****     // Enable Timer/Counter2 and trigger interrupts on both overflows & when
 120:oven_control.c ****     // it equals OC2A    
 121:oven_control.c ****     TIMSK2 |= (1 << OCIE2A) | (1 << TOIE2);
 670               		.stabn	68,0,121,.LM38-.LFBB5
 671               	.LM38:
 672 023e 80E7      		ldi r24,lo8(112)
 673 0240 90E0      		ldi r25,0
 674 0242 20E7      		ldi r18,lo8(112)
 675 0244 30E0      		ldi r19,0
 676 0246 F901      		movw r30,r18
 677 0248 2081      		ld r18,Z
GAS LISTING /tmp/ccSMNIDX.s 			page 15


 678 024a 2360      		ori r18,lo8(3)
 679 024c FC01      		movw r30,r24
 680 024e 2083      		st Z,r18
 681               	/* epilogue start */
 122:oven_control.c **** }
 682               		.stabn	68,0,122,.LM39-.LFBB5
 683               	.LM39:
 684 0250 DF91      		pop r29
 685 0252 CF91      		pop r28
 686 0254 0895      		ret
 687               		.size	oven_start, .-oven_start
 688               	.Lscope5:
 689               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 690               		.stabd	78,0,0
 691               		.stabs	"powerLUT:S(0,48)=ar(0,49)=r(0,49);0;0177777;;0;98;(0,50)=k(2,2)",38,0,18,powerLUT
 692               		.stabs	"_percent:G(0,51)=B(2,2)",32,0,8,0
 693               		.stabs	"_counter_t2:G(0,51)",32,0,9,0
 694               		.stabs	"",100,0,0,.Letext0
 695               	.Letext0:
 696               		.ident	"GCC: (GNU) 4.8.1"
 697               	.global __do_clear_bss
GAS LISTING /tmp/ccSMNIDX.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 oven_control.c
     /tmp/ccSMNIDX.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSMNIDX.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSMNIDX.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSMNIDX.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSMNIDX.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSMNIDX.s:113    .bss:0000000000000000 _percent
     /tmp/ccSMNIDX.s:118    .bss:0000000000000001 _counter_t2
     /tmp/ccSMNIDX.s:123    .progmem.data:0000000000000000 powerLUT
     /tmp/ccSMNIDX.s:227    .text:0000000000000000 __vector_1
     /tmp/ccSMNIDX.s:369    .text:00000000000000c4 __vector_7
     /tmp/ccSMNIDX.s:434    .text:000000000000011c __vector_9
     /tmp/ccSMNIDX.s:499    .text:0000000000000172 oven_setDutyCycle
     /tmp/ccSMNIDX.s:624    .text:0000000000000200 oven_start

UNDEFINED SYMBOLS
__divmodhi4
__do_clear_bss
